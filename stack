#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#define MAX_STACK_SIZE 100

typedef char element;
typedef struct {
    element data[MAX_STACK_SIZE];
    int top;
} StackType;

//수식을 계산할때 사용a
typedef struct {
    int data[MAX_STACK_SIZE];
    int top;
} StackRet;

// 스택 초기화 함수
void init_stack(StackType* s) {
    s->top = -1;
}

//스택 공백상태 확인 함수
int is_empty(StackType* s) {
    return (s->top == -1);
}
// 포화 상태 검출 함수
int is_full(StackType* s) {
    return (s->top == (MAX_STACK_SIZE - 1));
}
// push함수
void push(StackType* s, element item) {
    if (is_full(s)) {
        printf("스택 포화 에러\n");
        return;
    }
    else s->data[++(s->top)] = item;
}
// pop함수
element pop(StackType* s) {
    if (is_empty(s)) {
        printf("스택 공백 에러\n"); //아무것도 없는데 팝할게 없으면 오류남
        exit(1);
    }
    else return s->data[(s->top)--]; //스택이 가르키
    는 data라는 배열에 스택에 있는 탑에 있는 데이터를 리턴
}
// 맨 위의 데이터를 리턴해주는 함수 
element peek(StackType* s) { //스택의 최상단 들여다보기
    if (is_empty(s)) {
        printf("스택 공백 에러\n");
        exit(1);
    }
    else return s->data[s->top]; //가장 최상단에 있는 데이터를 리턴
}

int op1, op2, value;
int tmp, tmp2;
char ch;
StackType S;

int eval(char exp[])
{
    int op1, op2, value;
    int len = strlen(exp);
    int tmp, tmp2;
    char ch;
    char input[MAX_STACK_SIZE];

    StackType S;
    init_stack(&S);

    for (int i = 0; i < len; i++)
    {
        ch = exp[i];
        if (ch != '+' && ch != '-' && ch != '*' && ch != '/' && ch != '=' && ch != '^' && ch != '<' && ch != '>' && ch != '&' && ch != '|') //If operand
        {
            value = ch - '0'; //비연산자일 경우
            printf("push %d\n", value);
            push(&S, value);
        }
        else //연산자일 경우
        {
            //op2, op1을 이용하여 스택에서 가장 가까이 있는 데이터 2개를 꺼냄   
            op2 = pop(&S);
            op1 = pop(&S);
            printf("pop %d\n", op2);   //현재 빠진 데이터 확인 차 출력   
            printf("pop %d\n", op1);
            //////////////////////////
            switch (ch)
            {
            case '+':
                push(&S, op1 + op2);
                printf("%d+%d 계산결과 %d\n", op1, op2, op1 + op2);
                break;
            case '-':
                push(&S, op1 - op2);
                printf("%d-%d 계산결과 %d\n", op1, op2, op1 - op2);
                break;
            case '*':
                push(&S, op1 * op2);
                printf("%d*%d 계산결과 %d\n", op1, op2, op1 * op2);
                break;
            case '/':
                push(&S, op1 / op2);
                printf("%d/%d 계산결과 %d\n", op1, op2, op1 / op2);
                break;
            case '^':
                push(&S, (int)pow((double)op1, (double)op2));
                printf("%d^%d 계산결과 %d\n", op1, op2, (int)pow((double)op1, (double)op2));
                break;
            case'>':
                if (op1 > op2)
                    tmp = 1;
                else
                    tmp = 0;
                printf("%d>%d 계산결과 %d\n", op1, op2, tmp);
                push(&S, tmp);
                break;
            case'<':
                if (op1 < op2)
                    tmp = 1;
                else
                    tmp = 0;
                printf("%d<%d 계산결과 %d\n", op1, op2, tmp);
                push(&S, tmp);
                break;
            case'=':
                if (op1 == op2)
                    tmp = 1;   //op1이 op2보다 클 경우
                else
                    tmp = 0;
                printf("%d=%d 계산결과 %d\n", op1, op2, tmp);
                push(&S, tmp);
                break;
            case'&':   //op1과 op2를 and하면 op1이 반환됨.
                push(&S, op1 && op2);
                printf("%d&%d 계산결과 %d\n", op1, op2, op1 && op2);
                break;
            case'|':   //op1과 op2를 or하면 op2이 반환됨.
                push(&S, op1 || op2);
                printf("%d|%d 계산결과 %d\n", op1, op2, op1 || op2);
                break;



            }
        }
        StackType s1, s2;
        init_stack(&s1);
        init_stack(&s2);

        int i = 0, count = 0; //count 변수 0으로 초기화
        while (input[i] != NULL) {
            count = 0;
            char now = input[i++]; //now 변수에 현재 문자를 저장하고, i를 1 증가시킨다.
            count++;
            while (now == input[i] || now + ('A' - 'a') == input[i] || now - ('A' - 'a') == input[i]) { ////현재 문자가 그 다음 문자와 같거나, 현재 문자와 그 다음 문자가 대소문자 관계에 있는 경우(즉, 대문자와 소문자가 서로 대응하는 경우)에
                count++; //count를 1 증가시키고,
                i++;  //i를 1 증가시킨다.->이 작업을 반복해서 count 변수에 현재 문자가 연속으로 나타난 횟수를 저장한다.
            }
            push(&s1, count + '0'); //count 변수를 stack1에 넣기
            if ('a' <= now && now <= 'z') //만약 현재 문자가 소문자인 경우 그대로 넣고,
                push(&s1, now);
            else
                push(&s1, now - ('A' - 'a'));//대문자인 경우 소문자로 변환한 후 넣는다.
        }

        while (!is_empty(&s1)) {
            push(&s2, pop(&s1)); //문자열을 모두 처리한 뒤 스택 s1에 저장된 데이터를 스택 s2에 옮긴다 (역순으로 저장하기 위한 것)
        }
        printf("출력 : ");
        while (!is_empty(&s2)) {
            printf("%c", pop(&s2)); //스택 s2에서 데이터를 꺼내면서 출력
        }

    }
    return 0;
}


int main(void) {
    int num = 0;
    printf("1,2,3,4중 하나를 선택하세요: (4는 종료)");
    scanf_s("%d", &num);

    if (num == 1) {
        /* 아이디어
}
( 를 만나면 stack에 count를 저장하고, count를 올려준다.
) 를 만나면 stack에 pop을 한다.
) 를 만나면 제일 가까운 ( 와 짝이므로 스택의 top과 짝이 된다.
*/

        StackType s;
        init_stack(&s);
        char input[MAX_STACK_SIZE]; //수식 입력받기
        printf("수식 : ");
        scanf_s("%s", input);
        printf("괄호 수 : ");
        int i = 0, count = 1;
        while (input[i] != NULL) {
            if (input[i] == '(') {
                push(&s, count);
                printf("%d ", count);
                count++;
            }
            else {
                printf("%d ", pop(&s));
            }
            i++;
        }
    }


    //2번 과제 시작

    else if (num == 2)
    {
        char arr[MAX_STACK_SIZE];
        int cnt = 0;
        char s[100] = "3^+2";

        printf("중위표시수식 %s \n", s);
        printf("후위표시수식 ");
        eval(s);


    }

    //3번 과제 시작

    else if (num == 3)
    {
        printf("문자열을 입력하세요(예시:aaaAbBb, 결과: 4a3b) : ");
        char str[MAX_STACK_SIZE];
        scanf_s("%s", str);

        StackType s1, s2;
        init_stack(&s1);
        init_stack(&s2);

        int i = 0, count = 0; //count 변수 0으로 초기화
        while (str[i] != NULL) {
            count = 0;
            char now = str[i++]; //now 변수에 현재 문자를 저장하고, i를 1 증가시킨다.
            count++;
            while (now == str[i] || now + ('A' - 'a') == str[i] || now - ('A' - 'a') == str[i]) { ////현재 문자가 그 다음 문자와 같거나, 현재 문자와 그 다음 문자가 대소문자 관계에 있는 경우(즉, 대문자와 소문자가 서로 대응하는 경우)에
                count++; //count를 1 증가시키고,
                i++;  //i를 1 증가시킨다.->이 작업을 반복해서 count 변수에 현재 문자가 연속으로 나타난 횟수를 저장한다.
            }
            push(&s1, count + '0'); //count 변수를 stack1에 넣기
            if ('a' <= now && now <= 'z') //만약 현재 문자가 소문자인 경우 그대로 넣고,
                push(&s1, now);
            else
                push(&s1, now - ('A' - 'a'));//대문자인 경우 소문자로 변환한 후 넣는다.
        }

        while (!is_empty(&s1)) {
            push(&s2, pop(&s1)); //문자열을 모두 처리한 뒤 스택 s1에 저장된 데이터를 스택 s2에 옮긴다 (역순으로 저장하기 위한 것)
        }
        printf("출력 : ");
        while (!is_empty(&s2)) {
            printf("%c", pop(&s2)); //스택 s2에서 데이터를 꺼내면서 출력
        }



    }


    return 0;
}
